객체가 가지고 있는 정보나 값들을 String으로 만들어 return하는 메소드

Ex) int number = 33;
    String str = Integer.toString(number); // 정수형 33을 String으로 변환하여 return 한다.

※ toString()은 자동으로 호출되기도 한다.
Ex) System.out.print(str); // str 이 str.toString() 에서 .toString()이 자동호출 된 것.

-----------------------------------------------------------------------------------------------------

(심화) 
출처 : https://hudi.blog/java-correct-purpose-of-tostring/

1. toString 메소드가 뭘까? 
toString의 일반 규약은 '간결하면서 사람이 읽기 쉬운 형태의 유익한 정보'를 반환하는 것이다. 

그런데 java.lang package의 Object class의 toString 메소드의 구현을 살펴보면 아래와 같다.
public String toString() {
    return getClass().getName() + "@" + Integer.toHexString(hashCode());
}
여기서 기본 toString 메소드는 클래스명@16진수로_표시된_해시코드 형태의 문자열을 반환하는 것을 알 수 있다.

2. toStrint을 항상 재정의 하라
toString을 항상 재정의 하라는 말은 무슨 뜻일까?

toString은 디버깅을 위해 설계된 메소드라고 한다. 
어떤 문제가 발생한 클래스가 toString이 잘 구현된 클래스일 경우 스스로를 완벽히 설명하는 문자열이 로깅 될 것이고,
원인을 발견하기 쉬워질 것이다.

toString이 잘 구현된 클래스는 사용하기 편하고, '디버깅'이 쉽다. 객체를 출력하기만 하면,
객체가 가지고 있는 모든 정보를 확인 할 수 있다.
우리가 직접 호출하지 않아도, 로깅을 하거나 에러메세지를 출력할 때에도 유용하게 사용 할 수 있다.

toString은 객체가 가진 모든 주요 정보를 반환하는 것이 좋다.
이상적으로는 스스로를 완벽히 설명하는 문자열이어야 한다.

Ex)
class Car {
    final String name;
    final int position;

    Car(String name, int position) {
        this.name = name;
        this.position = position;
    }

    @Override
    public String toString() {
        return String.format("자동차 (이름 = %s, 위치 = %s)", name, position);
    }
}

이렇게 재정의된 toString 메소드는 직접 호출하지 않더라도 문자열 출력 시, 
문자열 결합 연산자 등을 사용할 때 자동으로 호출된다. 

단, 정적 유틸리티 클래스의 경우 toString을 제공할 필요가 없다.
또한 대부분의 Enum 타입은 이미 자바가 완벽한 toString을 제공하므로 재정의 할 필요 없다.

